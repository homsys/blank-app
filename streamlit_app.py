import streamlit as st
import requests
import json
from streamlit_autorefresh import st_autorefresh
from streamlit_javascript import st_javascript
from urllib.parse import urlparse, parse_qs, unquote
import re





# CSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
discord_style = """
<style>
.discord-message {
    background-color: #36393f;
    color: #ffffff;
    border-radius: 8px;
    padding: 10px;
    margin: 5px 0;
    max-width: 70%;
    word-wrap: break-word;
    font-family: Arial, sans-serif;
}
.username {
    color: #7289da;
    font-weight: bold;
}
</style>
"""


@st.cache_data(ttl=60)  # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥!
def get_crow_data():  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ crow
    params = {
        'symbol': 'CROW',
        'range': '1d',
    }
    try:
        response = requests.get('https://api.wemixplay.com/info/v2/price-chart', params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException:
        return None


@st.cache_data(ttl=60)  # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥!
def get_discord_message():  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –¥–∏—Å–∫–æ—Ä–¥–∞
    TOKEN = st.secrets["discord"]["token"]
    CHANNEL_ID = '1215815002422906881'
    headers = {
        "Authorization": f"Bot {TOKEN}"
    }
    params2 = {
        'chat_id': CHANNEL_ID,
        'limit': 30  # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ 30 —Å–æ–æ–±—â–µ–Ω–∏–π
    }
    try:
        response_discord = requests.get(
            url=f"https://discord.com/api/v10/channels/{CHANNEL_ID}/messages",
            headers=headers,
            params=params2
        )
        response_discord.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        return response_discord.json()

    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Discord API: {e}")


def add_username(content):  # –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∫ –≤ —Å–æ–æ–±–µ—â–Ω–∏–µ
    url = st_javascript("await fetch('').then(r => window.parent.location.href)")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ '#'
    fragment = urlparse(url).fragment

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = parse_qs(fragment)

    # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    decoded_params = {key: unquote(value[0]) for key, value in params.items()}


    user_data_str = decoded_params["tgWebAppData"].split('user=')[1].split('&')[0]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
    user_data = json.loads(user_data_str)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º username
    username = user_data["username"]
    return username


def send_message_to_channel(content):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    TOKEN = st.secrets["discord"]["token"]

    id_canal = "941976229412761653"

    # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    url = f"https://discord.com/api/v10/channels/{id_canal}/messages"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        "Authorization": f"Bot {TOKEN}",
        "Content-Type": "application/json"
    }

    send_message_to_channel(content)

    username = F"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç{name}"

    colored_message = F"""{username}```ansi
[2;31m[2;31m[2;31m[2;31m{content}[0m[2;31m[0m[2;31m[0m[2;31m[0m[2;31m[2;31m[2;31m[2;31m[2;41m[2;31m[2;31m[2;31m[0m[2;31m[2;41m[0m[2;31m[2;41m[0m[2;31m[2;41m[0m[2;31m[0m[2;31m[0m[2;31m[0m[2;31m[0m
```"""


    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    data = {
        "content": colored_message
    }


    # –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
    response = requests.post(url, headers=headers, data=json.dumps(data))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if response.status_code == 200:
        st.success("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Streamlit
    else:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}, {response.text}")  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ


def remove_text(text):  # –û—á–∏—â—è—é —Ç–µ–∫—Å—Ç –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –æ–∫—Ä–∞—à–∏–≤–∞—é—â–∏—Ö —Ç–µ–∫—Å—Ç
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö ANSI-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    text = ansi_escape.sub('', text)
    new_string = text.replace("```ansi", "")
    new_string = new_string.replace("```", "")
    return new_string


def message_chat(messages):  # –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —á–∞—Ç–∞
    if messages:
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è HTML-–∫–æ–¥–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        all_messages_html = ""
        try:
            for i in range(0, 30):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 30 —Å–æ–æ–±—â–µ–Ω–∏–π
                username = messages[i]["author"]["username"]
                content = messages[i]["content"]
                if content == "":
                    continue

                cleaned_content = remove_text(content)

                # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                s1 = """<span class="username">"""
                s2 = "</span>"
                all_messages_html += F" {s1} {username} {s2} : {cleaned_content} <br>"

        except (IndexError, KeyError):
            pass

        # –û–±–µ—Ä—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–∏–Ω –±–ª–æ–∫ div
        final_html = f"""
                <div class="discord-message">
                    {all_messages_html}
                </div>
                """
        return final_html
    else:
        st.warning("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ.")


def find_values(data, key, result_list):  # –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    if isinstance(data, dict):
        for k, v in data.items():
            if k == key:
                result_list.append(v)
            elif isinstance(v, (dict, list)):
                find_values(v, key, result_list)
    elif isinstance(data, list):
        for item in data:
            find_values(item, key, result_list)


def main():
    placeholder_crow = st.empty()
    placeholder_crow.write("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

    data = get_crow_data()

    if data is None:
        placeholder_crow.write("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ CROW")
        return

    list_crow = []
    find_values(data, 'p', list_crow)

    if not list_crow:
        placeholder_crow.write("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    average = sum(list_crow) / len(list_crow)
    average = round(average, 4)
    placeholder_crow.write(f"CROW: $<span style='color:red'>{average}</span>", unsafe_allow_html=True)

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_content = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏—Å–∫–æ—Ä–¥ —á–∞—Ç:")

    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"):     # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if message_content:
            send_message_to_channel(message_content)
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ

    messages = get_discord_message()  # –ü—Ä–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    final_html = message_chat(messages)  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML
    st.markdown(final_html, unsafe_allow_html=True)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    st_autorefresh(interval=60 * 1000, key="crow_refresh")

    # –í—Å—Ç–∞–≤–ª—è–µ–º CSS –≤ Streamlit
    st.markdown(discord_style, unsafe_allow_html=True)

    url = st_javascript("await fetch('').then(r => window.parent.location.href)")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ '#'
    fragment = urlparse(url).fragment

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = parse_qs(fragment)

    # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    decoded_params = {key: unquote(value[0]) for key, value in params.items()}


    user_data_str = decoded_params["tgWebAppData"].split('user=')[1].split('&')[0]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
    user_data = json.loads(user_data_str)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º username
    username = user_data["username"]
    st.write(username)


if __name__ == '__main__':
    main()
